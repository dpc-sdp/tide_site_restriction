<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_field_access().
 */
function tide_site_restriction_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  if ($field_definition->getName() == 'field_user_site') {
    return $account->hasPermission('administer site restriction') ? AccessResult::allowed() : AccessResult::forbidden();
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_entity_access().
 */
function tide_site_restriction_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\tide_site_restriction\Helper $site_restriction_helper */
  $site_restriction_helper = \Drupal::service('tide_site_restriction.helper');
  if (!in_array($entity->getEntityTypeId(), $site_restriction_helper->getSupportedEntityTypes())) {
    return AccessResult::neutral()->addCacheableDependency($entity);
  }
  if ($account->isAuthenticated() && in_array($operation, ['update', 'delete'])) {
    /** @var \Drupal\user\Entity\User $user */
    $user = User::load($account->id());
    $user_sites = $site_restriction_helper->getUserSites($user);
    $user_can_bypass_restriction = $site_restriction_helper->canBypassRestriction($account);
    if (!$user_can_bypass_restriction) {
      if ($site_restriction_helper->hasEntitySitesAccess($entity, $user_sites)) {
        return AccessResult::neutral()
          ->addCacheableDependency($entity)
          ->addCacheTags(['site_restriction'])
          ->cachePerUser();
      }
      return AccessResult::forbidden('Access denied by Site Restriction.')
        ->addCacheableDependency($entity)
        ->addCacheTags(['site_restriction'])
        ->cachePerUser();
    }
  }

  return AccessResult::neutral()->addCacheableDependency($entity);
}

/**
 * Implements hook_views_post_render().
 */
function tide_site_restriction_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  /** @var \Drupal\tide_site_restriction\Helper $site_restriction_helper */
  $site_restriction_helper = \Drupal::service('tide_site_restriction.helper');
  if (in_array($view->getBaseEntityType()->id(), $site_restriction_helper->getSupportedEntityTypes())) {
    $output['#cache']['tags'][] = 'site_restriction';
    if (\Drupal::currentUser()->isAuthenticated()) {
      $output['#cache']['tags'][] = 'user:' . \Drupal::currentUser()->id();
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function tide_site_restriction_views_pre_render(ViewExecutable $view) {
  /** @var \Drupal\tide_site_restriction\Helper $site_restriction_helper */
  $site_restriction_helper = \Drupal::service('tide_site_restriction.helper');
  if (in_array($view->getBaseEntityType()->id(), $site_restriction_helper->getSupportedEntityTypes())) {
    foreach ($view->result as $row) {
      if ($row->_entity) {
        $row->_entity->addCacheTags(['site_restriction']);
        if (\Drupal::currentUser()->isAuthenticated()) {
          $row->_entity->addCacheTags(['user:' . \Drupal::currentUser()->id()]);
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function tide_site_restriction_user_presave(UserInterface $user) {
  Cache::invalidateTags(['site_restriction']);
}

/**
 * Implements hook_views_pre_view().
 */
function tide_site_restriction_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  // Pre-select user sites in Summary Content admin view.
  $view_ids = ['summary_contents_filters', 'media'];
  $display_ids = ['page_1' => 'field_node_site_target_id', 'media_page_list' => 'field_media_site_target_id'];
  foreach ($view_ids as $view_id) {
    if ($view->id() == $view_id) {
      foreach ($display_ids as $id => $filter) {
        if ($display_id == $id) {
          /** @var \Drupal\tide_site_restriction\Helper $site_restriction_helper */
          $site_restriction_helper = \Drupal::service('tide_site_restriction.helper');
          $account = \Drupal::currentUser();
          $user_can_bypass_restriction = $site_restriction_helper->canBypassRestriction($account);;

          $filters = $view->display_handler->getOption('filters');
          if (!empty($filters[$filter])) {
            // Change the filter to accept multiple values.
            $filters[$filter]['expose']['multiple'] = TRUE;
            $view->display_handler->setOption('filters', $filters);

            // Pre-select the user sites if the filter is empty.
            if (!$user_can_bypass_restriction) {
              /** @var \Drupal\user\Entity\User $user */
              $user = User::load($account->id());
              $user_sites = $site_restriction_helper->getUserSites($user);
              $exposed_input = $view->getExposedInput();
              if (!empty($user_sites) && empty($exposed_input)) {
                $exposed_input[$filter] = $user_sites;
                $view->setExposedInput($exposed_input);
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tide_site_restriction_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Enable Select2 to Site filter of Content Admin view.
  $form_ids = [
    'views-exposed-form-media-media-page-list' => 'field_media_site_target_id',
    'views-exposed-form-summary-contents-filters-page-1' => 'field_node_site_target_id',
  ];
  foreach ($form_ids as $form_id => $filter) {
    if (!empty($form['#id']) && $form['#id'] == $form_id) {
      if (!empty($form[$filter]['#multiple'])) {
        $form[$filter]['#type'] = 'select2';
        $form[$filter]['#select2'] = [
          'allowClear' => TRUE,
          'dropdownAutoWidth' => FALSE,
          'width' => 'resolve',
          'closeOnSelect' => FALSE,
          'placeholder' => t('- Any -'),
        ];
      }
    }
  }
}
