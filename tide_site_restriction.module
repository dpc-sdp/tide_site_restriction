<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_field_access().
 */
function tide_site_restriction_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  if ($field_definition->getName() == 'field_user_site') {
    return $account->hasPermission('administer site restriction') ? AccessResult::allowed() : AccessResult::forbidden();
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_node_access().
 */
function tide_site_restriction_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if ($account->isAuthenticated() && in_array($op, ['update', 'delete'])) {
    /** @var \Drupal\tide_site\TideSiteHelper $site_helper */
    $site_helper = \Drupal::service('tide_site.helper');
    $node_sites = $site_helper->getEntitySites($node);

    /** @var \Drupal\tide_site_restriction\Helper $site_restriction_helper */
    $site_restriction_helper = \Drupal::service('tide_site_restriction.helper');
    /** @var \Drupal\user\Entity\User $user */
    $user = User::load($account->id());
    $user_sites = $site_restriction_helper->getUserSites($user);
    $user_can_bypass_restriction = $site_restriction_helper->canBypassRestriction($account);
    if (!$user_can_bypass_restriction) {
      foreach ($user_sites as $site_id) {
        if (isset($node_sites['ids'][$site_id]) || in_array($site_id, $node_sites['sections'])) {
          return AccessResult::allowed()
            ->addCacheableDependency($node)
            ->addCacheTags(['site_restriction'])
            ->cachePerUser();
        }
      }
      return AccessResult::forbidden('Access denied by Site Restriction.')
        ->addCacheableDependency($node)
        ->addCacheTags(['site_restriction'])
        ->cachePerUser();
    }
  }

  return AccessResult::neutral()->addCacheableDependency($node);
}

/**
 * Implements hook_views_post_render().
 */
function tide_site_restriction_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($view->getBaseEntityType()->id() == 'node') {
    $output['#cache']['tags'][] = 'site_restriction';
    if (\Drupal::currentUser()->isAuthenticated()) {
      $output['#cache']['tags'][] = 'user:' . \Drupal::currentUser()->id();
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function tide_site_restriction_views_pre_render(ViewExecutable $view) {
  if ($view->getBaseEntityType()->id() == 'node') {
    foreach ($view->result as $row) {
      if ($row->_entity) {
        $row->_entity->addCacheTags(['site_restriction']);
        if (\Drupal::currentUser()->isAuthenticated()) {
          $row->_entity->addCacheTags(['user:' . \Drupal::currentUser()->id()]);
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function tide_site_restriction_user_presave(UserInterface $user) {
  Cache::invalidateTags(['site_restriction']);
}

/**
 * Implements hook_views_pre_view().
 */
function tide_site_restriction_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  // Pre-select user sites in Summary Content admin view.
  if ($view->id() == 'summary_contents_filters') {
    if ($display_id == 'page_1') {
      /** @var \Drupal\tide_site_restriction\Helper $site_restriction_helper */
      $site_restriction_helper = \Drupal::service('tide_site_restriction.helper');
      $account = \Drupal::currentUser();
      $user_can_bypass_restriction = $site_restriction_helper->canBypassRestriction($account);;

      $filters = $view->display_handler->getOption('filters');
      if (!empty($filters['field_node_site_target_id'])) {
        // Change the filter to accept multiple values.
        $filters['field_node_site_target_id']['expose']['multiple'] = TRUE;
        $view->display_handler->setOption('filters', $filters);

        // Pre-select the user sites if the filter is empty.
        if (!$user_can_bypass_restriction) {
          /** @var \Drupal\user\Entity\User $user */
          $user = User::load($account->id());
          $user_sites = $site_restriction_helper->getUserSites($user);
          $exposed_input = $view->getExposedInput();
          if (!empty($user_sites) && empty($exposed_input)) {
            $exposed_input['field_node_site_target_id'] = $user_sites;
            $view->setExposedInput($exposed_input);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tide_site_restriction_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Enable Select2 to Site filter of Content Admin view.
  if (!empty($form['#id']) && $form['#id'] == 'views-exposed-form-summary-contents-filters-page-1') {
    if (!empty($form['field_node_site_target_id']['#multiple'])) {
      $form['field_node_site_target_id']['#type'] = 'select2';
      $form['field_node_site_target_id']['#select2'] = [
        'allowClear' => TRUE,
        'dropdownAutoWidth' => FALSE,
        'width' => 'resolve',
        'closeOnSelect' => FALSE,
        'placeholder' => t('- Any -'),
      ];
    }
  }
}
